// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qmyx {

namespace {

const ::google::protobuf::Descriptor* RResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PACK_CMD_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Common_2eproto() {
  protobuf_AddDesc_Common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Common.proto");
  GOOGLE_CHECK(file != NULL);
  RResult_descriptor_ = file->message_type(0);
  static const int RResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RResult, msg_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RResult, sub_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RResult, append1_),
  };
  RResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RResult_descriptor_,
      RResult::default_instance_,
      RResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RResult));
  PACK_CMD_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RResult_descriptor_, &RResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Common_2eproto() {
  delete RResult::default_instance_;
  delete RResult_reflection_;
}

void protobuf_AddDesc_Common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Common.proto\022\004qmyx\"L\n\007RResult\022\017\n\007msg_c"
    "md\030\001 \002(\r\022\016\n\006result\030\002 \002(\r\022\017\n\007sub_cmd\030\003 \001("
    "\r\022\017\n\007append1\030\004 \001(\r*\344\003\n\010PACK_CMD\022\025\n\021PACK_"
    "CMD_R_RESULT\020\001\022\024\n\020PACK_CMD_Q_ALIVE\020\002\022\026\n\022"
    "PACK_CMD_Q_ACCOUNT\020\003\022\026\n\022PACK_CMD_R_ACCOU"
    "NT\020\004\022\032\n\026PACK_CMD_Q_ROLE_CREATE\020\005\022\031\n\025PACK"
    "_CMD_Q_ROLE_LOGIN\020\006\022\031\n\025PACK_CMD_R_ROLE_L"
    "OGIN\020\007\022\031\n\025PACK_CMD_R_MAP_UPDATE\020\010\022\030\n\024PAC"
    "K_CMD_Q_ROLE_MOVE\020\t\022\030\n\024PACK_CMD_R_ROLE_M"
    "OVE\020\n\022\030\n\024PACK_CMD_R_ROLE_VIEW\020\013\022\031\n\025PACK_"
    "CMD_Q_CREATE_MAP\020\014\022\031\n\025PACK_CMD_Q_CHANGE_"
    "MAP\020\r\022\031\n\025PACK_CMD_Q_OTHER_INFO\020\016\022\031\n\025PACK"
    "_CMD_R_OTHER_INFO\020\017\022\037\n\033PACK_CMD_R_PUBLIC"
    "_CITY_INFO\020\020\022\031\n\025PACK_CMD_Q_TRRIGER_AI\020\021\022"
    "\030\n\024PACK_CMD_R_AI_RESULT\020\022", 585);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Common.proto", &protobuf_RegisterTypes);
  RResult::default_instance_ = new RResult();
  RResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Common_2eproto {
  StaticDescriptorInitializer_Common_2eproto() {
    protobuf_AddDesc_Common_2eproto();
  }
} static_descriptor_initializer_Common_2eproto_;
const ::google::protobuf::EnumDescriptor* PACK_CMD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PACK_CMD_descriptor_;
}
bool PACK_CMD_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RResult::kMsgCmdFieldNumber;
const int RResult::kResultFieldNumber;
const int RResult::kSubCmdFieldNumber;
const int RResult::kAppend1FieldNumber;
#endif  // !_MSC_VER

RResult::RResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RResult::InitAsDefaultInstance() {
}

RResult::RResult(const RResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RResult::SharedCtor() {
  _cached_size_ = 0;
  msg_cmd_ = 0u;
  result_ = 0u;
  sub_cmd_ = 0u;
  append1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RResult::~RResult() {
  SharedDtor();
}

void RResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RResult_descriptor_;
}

const RResult& RResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

RResult* RResult::default_instance_ = NULL;

RResult* RResult::New() const {
  return new RResult;
}

void RResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_cmd_ = 0u;
    result_ = 0u;
    sub_cmd_ = 0u;
    append1_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msg_cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_cmd_)));
          set_has_msg_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sub_cmd;
        break;
      }

      // optional uint32 sub_cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_cmd_)));
          set_has_sub_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_append1;
        break;
      }

      // optional uint32 append1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_append1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &append1_)));
          set_has_append1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 msg_cmd = 1;
  if (has_msg_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msg_cmd(), output);
  }

  // required uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  // optional uint32 sub_cmd = 3;
  if (has_sub_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sub_cmd(), output);
  }

  // optional uint32 append1 = 4;
  if (has_append1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->append1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 msg_cmd = 1;
  if (has_msg_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_cmd(), target);
  }

  // required uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  // optional uint32 sub_cmd = 3;
  if (has_sub_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sub_cmd(), target);
  }

  // optional uint32 append1 = 4;
  if (has_append1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->append1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 msg_cmd = 1;
    if (has_msg_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_cmd());
    }

    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 sub_cmd = 3;
    if (has_sub_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_cmd());
    }

    // optional uint32 append1 = 4;
    if (has_append1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->append1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RResult::MergeFrom(const RResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_cmd()) {
      set_msg_cmd(from.msg_cmd());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_sub_cmd()) {
      set_sub_cmd(from.sub_cmd());
    }
    if (from.has_append1()) {
      set_append1(from.append1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RResult::CopyFrom(const RResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RResult::Swap(RResult* other) {
  if (other != this) {
    std::swap(msg_cmd_, other->msg_cmd_);
    std::swap(result_, other->result_);
    std::swap(sub_cmd_, other->sub_cmd_);
    std::swap(append1_, other->append1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RResult_descriptor_;
  metadata.reflection = RResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace qmyx

// @@protoc_insertion_point(global_scope)
