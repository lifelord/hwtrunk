// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AI.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AI.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qmyx {

namespace {

const ::google::protobuf::Descriptor* QTriggleAI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QTriggleAI_reflection_ = NULL;
const ::google::protobuf::Descriptor* QAIResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QAIResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AI_2eproto() {
  protobuf_AddDesc_AI_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AI.proto");
  GOOGLE_CHECK(file != NULL);
  QTriggleAI_descriptor_ = file->message_type(0);
  static const int QTriggleAI_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTriggleAI, nmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTriggleAI, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTriggleAI, naiid_),
  };
  QTriggleAI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QTriggleAI_descriptor_,
      QTriggleAI::default_instance_,
      QTriggleAI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTriggleAI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTriggleAI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QTriggleAI));
  QAIResult_descriptor_ = file->message_type(1);
  static const int QAIResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QAIResult, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QAIResult, nposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QAIResult, nposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QAIResult, nblood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QAIResult, nskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QAIResult, nplayerid_),
  };
  QAIResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QAIResult_descriptor_,
      QAIResult::default_instance_,
      QAIResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QAIResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QAIResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QAIResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AI_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QTriggleAI_descriptor_, &QTriggleAI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QAIResult_descriptor_, &QAIResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AI_2eproto() {
  delete QTriggleAI::default_instance_;
  delete QTriggleAI_reflection_;
  delete QAIResult::default_instance_;
  delete QAIResult_reflection_;
}

void protobuf_AddDesc_AI_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::qmyx::protobuf_AddDesc_Common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010AI.proto\022\004qmyx\032\014Common.proto\"8\n\nQTrigg"
    "leAI\022\016\n\006nmapId\030\001 \002(\r\022\013\n\003nId\030\002 \002(\r\022\r\n\005nAi"
    "Id\030\003 \002(\r\"i\n\tQAIResult\022\013\n\003nId\030\001 \002(\r\022\r\n\005np"
    "osx\030\002 \001(\r\022\r\n\005nposy\030\003 \001(\r\022\016\n\006nblood\030\004 \001(\r"
    "\022\016\n\006nskill\030\005 \001(\r\022\021\n\tnplayerid\030\006 \001(\r", 195);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AI.proto", &protobuf_RegisterTypes);
  QTriggleAI::default_instance_ = new QTriggleAI();
  QAIResult::default_instance_ = new QAIResult();
  QTriggleAI::default_instance_->InitAsDefaultInstance();
  QAIResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AI_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AI_2eproto {
  StaticDescriptorInitializer_AI_2eproto() {
    protobuf_AddDesc_AI_2eproto();
  }
} static_descriptor_initializer_AI_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int QTriggleAI::kNmapIdFieldNumber;
const int QTriggleAI::kNIdFieldNumber;
const int QTriggleAI::kNAiIdFieldNumber;
#endif  // !_MSC_VER

QTriggleAI::QTriggleAI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QTriggleAI::InitAsDefaultInstance() {
}

QTriggleAI::QTriggleAI(const QTriggleAI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QTriggleAI::SharedCtor() {
  _cached_size_ = 0;
  nmapid_ = 0u;
  nid_ = 0u;
  naiid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QTriggleAI::~QTriggleAI() {
  SharedDtor();
}

void QTriggleAI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QTriggleAI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QTriggleAI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QTriggleAI_descriptor_;
}

const QTriggleAI& QTriggleAI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AI_2eproto();
  return *default_instance_;
}

QTriggleAI* QTriggleAI::default_instance_ = NULL;

QTriggleAI* QTriggleAI::New() const {
  return new QTriggleAI;
}

void QTriggleAI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nmapid_ = 0u;
    nid_ = 0u;
    naiid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QTriggleAI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nmapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nmapid_)));
          set_has_nmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nId;
        break;
      }

      // required uint32 nId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nAiId;
        break;
      }

      // required uint32 nAiId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nAiId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &naiid_)));
          set_has_naiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QTriggleAI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nmapId = 1;
  if (has_nmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nmapid(), output);
  }

  // required uint32 nId = 2;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nid(), output);
  }

  // required uint32 nAiId = 3;
  if (has_naiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->naiid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QTriggleAI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nmapId = 1;
  if (has_nmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nmapid(), target);
  }

  // required uint32 nId = 2;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nid(), target);
  }

  // required uint32 nAiId = 3;
  if (has_naiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->naiid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QTriggleAI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nmapId = 1;
    if (has_nmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nmapid());
    }

    // required uint32 nId = 2;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required uint32 nAiId = 3;
    if (has_naiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->naiid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QTriggleAI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QTriggleAI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QTriggleAI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QTriggleAI::MergeFrom(const QTriggleAI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nmapid()) {
      set_nmapid(from.nmapid());
    }
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_naiid()) {
      set_naiid(from.naiid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QTriggleAI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QTriggleAI::CopyFrom(const QTriggleAI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QTriggleAI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void QTriggleAI::Swap(QTriggleAI* other) {
  if (other != this) {
    std::swap(nmapid_, other->nmapid_);
    std::swap(nid_, other->nid_);
    std::swap(naiid_, other->naiid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QTriggleAI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QTriggleAI_descriptor_;
  metadata.reflection = QTriggleAI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QAIResult::kNIdFieldNumber;
const int QAIResult::kNposxFieldNumber;
const int QAIResult::kNposyFieldNumber;
const int QAIResult::kNbloodFieldNumber;
const int QAIResult::kNskillFieldNumber;
const int QAIResult::kNplayeridFieldNumber;
#endif  // !_MSC_VER

QAIResult::QAIResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QAIResult::InitAsDefaultInstance() {
}

QAIResult::QAIResult(const QAIResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QAIResult::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  nposx_ = 0u;
  nposy_ = 0u;
  nblood_ = 0u;
  nskill_ = 0u;
  nplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QAIResult::~QAIResult() {
  SharedDtor();
}

void QAIResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QAIResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QAIResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QAIResult_descriptor_;
}

const QAIResult& QAIResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AI_2eproto();
  return *default_instance_;
}

QAIResult* QAIResult::default_instance_ = NULL;

QAIResult* QAIResult::New() const {
  return new QAIResult;
}

void QAIResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    nposx_ = 0u;
    nposy_ = 0u;
    nblood_ = 0u;
    nskill_ = 0u;
    nplayerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QAIResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nposx;
        break;
      }

      // optional uint32 nposx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nposx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nposx_)));
          set_has_nposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nposy;
        break;
      }

      // optional uint32 nposy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nposy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nposy_)));
          set_has_nposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nblood;
        break;
      }

      // optional uint32 nblood = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nblood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nblood_)));
          set_has_nblood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nskill;
        break;
      }

      // optional uint32 nskill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nskill_)));
          set_has_nskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nplayerid;
        break;
      }

      // optional uint32 nplayerid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nplayerid_)));
          set_has_nplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QAIResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // optional uint32 nposx = 2;
  if (has_nposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nposx(), output);
  }

  // optional uint32 nposy = 3;
  if (has_nposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nposy(), output);
  }

  // optional uint32 nblood = 4;
  if (has_nblood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nblood(), output);
  }

  // optional uint32 nskill = 5;
  if (has_nskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nskill(), output);
  }

  // optional uint32 nplayerid = 6;
  if (has_nplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QAIResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // optional uint32 nposx = 2;
  if (has_nposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nposx(), target);
  }

  // optional uint32 nposy = 3;
  if (has_nposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nposy(), target);
  }

  // optional uint32 nblood = 4;
  if (has_nblood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nblood(), target);
  }

  // optional uint32 nskill = 5;
  if (has_nskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->nskill(), target);
  }

  // optional uint32 nplayerid = 6;
  if (has_nplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->nplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QAIResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // optional uint32 nposx = 2;
    if (has_nposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nposx());
    }

    // optional uint32 nposy = 3;
    if (has_nposy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nposy());
    }

    // optional uint32 nblood = 4;
    if (has_nblood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nblood());
    }

    // optional uint32 nskill = 5;
    if (has_nskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nskill());
    }

    // optional uint32 nplayerid = 6;
    if (has_nplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QAIResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QAIResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QAIResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QAIResult::MergeFrom(const QAIResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_nposx()) {
      set_nposx(from.nposx());
    }
    if (from.has_nposy()) {
      set_nposy(from.nposy());
    }
    if (from.has_nblood()) {
      set_nblood(from.nblood());
    }
    if (from.has_nskill()) {
      set_nskill(from.nskill());
    }
    if (from.has_nplayerid()) {
      set_nplayerid(from.nplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QAIResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QAIResult::CopyFrom(const QAIResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QAIResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QAIResult::Swap(QAIResult* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(nposx_, other->nposx_);
    std::swap(nposy_, other->nposy_);
    std::swap(nblood_, other->nblood_);
    std::swap(nskill_, other->nskill_);
    std::swap(nplayerid_, other->nplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QAIResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QAIResult_descriptor_;
  metadata.reflection = QAIResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace qmyx

// @@protoc_insertion_point(global_scope)
