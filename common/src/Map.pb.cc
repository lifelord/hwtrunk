// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qmyx {

namespace {

const ::google::protobuf::Descriptor* SPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SIdinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SIdinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RIdList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RIdList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SMapUpd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SMapUpd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QMoveUpd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QMoveUpd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RMoveUpd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RMoveUpd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SViewRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SViewRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* RViewRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RViewRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* QCreateMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QCreateMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* RMapUpdateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RMapUpdateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QChangeMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QChangeMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* SOtherRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SOtherRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* QOtherRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QOtherRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* ROtherRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROtherRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VIEW_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MAPTYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OBJECTTYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Map_2eproto() {
  protobuf_AddDesc_Map_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Map.proto");
  GOOGLE_CHECK(file != NULL);
  SPoint_descriptor_ = file->message_type(0);
  static const int SPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPoint, y_),
  };
  SPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPoint_descriptor_,
      SPoint::default_instance_,
      SPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPoint));
  SIdinfo_descriptor_ = file->message_type(1);
  static const int SIdinfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIdinfo, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIdinfo, nconfigid_),
  };
  SIdinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SIdinfo_descriptor_,
      SIdinfo::default_instance_,
      SIdinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIdinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIdinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SIdinfo));
  RIdList_descriptor_ = file->message_type(2);
  static const int RIdList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RIdList, id_list_),
  };
  RIdList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RIdList_descriptor_,
      RIdList::default_instance_,
      RIdList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RIdList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RIdList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RIdList));
  SMapUpd_descriptor_ = file->message_type(3);
  static const int SMapUpd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMapUpd, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMapUpd, npid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMapUpd, nconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMapUpd, pt_),
  };
  SMapUpd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SMapUpd_descriptor_,
      SMapUpd::default_instance_,
      SMapUpd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMapUpd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMapUpd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SMapUpd));
  QMoveUpd_descriptor_ = file->message_type(4);
  static const int QMoveUpd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QMoveUpd, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QMoveUpd, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QMoveUpd, trigger_),
  };
  QMoveUpd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QMoveUpd_descriptor_,
      QMoveUpd::default_instance_,
      QMoveUpd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QMoveUpd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QMoveUpd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QMoveUpd));
  RMoveUpd_descriptor_ = file->message_type(5);
  static const int RMoveUpd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMoveUpd, result_),
  };
  RMoveUpd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RMoveUpd_descriptor_,
      RMoveUpd::default_instance_,
      RMoveUpd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMoveUpd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMoveUpd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RMoveUpd));
  SViewRole_descriptor_ = file->message_type(6);
  static const int SViewRole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SViewRole, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SViewRole, pt_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SViewRole, pt_end_),
  };
  SViewRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SViewRole_descriptor_,
      SViewRole::default_instance_,
      SViewRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SViewRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SViewRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SViewRole));
  RViewRole_descriptor_ = file->message_type(7);
  static const int RViewRole_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RViewRole, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RViewRole, info_),
  };
  RViewRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RViewRole_descriptor_,
      RViewRole::default_instance_,
      RViewRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RViewRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RViewRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RViewRole));
  QCreateMap_descriptor_ = file->message_type(8);
  static const int QCreateMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCreateMap, nsenceid_),
  };
  QCreateMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QCreateMap_descriptor_,
      QCreateMap::default_instance_,
      QCreateMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCreateMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCreateMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QCreateMap));
  RMapUpdateInfo_descriptor_ = file->message_type(9);
  static const int RMapUpdateInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMapUpdateInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMapUpdateInfo, info_),
  };
  RMapUpdateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RMapUpdateInfo_descriptor_,
      RMapUpdateInfo::default_instance_,
      RMapUpdateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMapUpdateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMapUpdateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RMapUpdateInfo));
  QChangeMap_descriptor_ = file->message_type(10);
  static const int QChangeMap_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QChangeMap, old_nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QChangeMap, new_nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QChangeMap, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QChangeMap, pt_born_),
  };
  QChangeMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QChangeMap_descriptor_,
      QChangeMap::default_instance_,
      QChangeMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QChangeMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QChangeMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QChangeMap));
  SOtherRole_descriptor_ = file->message_type(11);
  static const int SOtherRole_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOtherRole, nid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOtherRole, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOtherRole, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOtherRole, nconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOtherRole, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOtherRole, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOtherRole, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOtherRole, name_),
  };
  SOtherRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SOtherRole_descriptor_,
      SOtherRole::default_instance_,
      SOtherRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOtherRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SOtherRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SOtherRole));
  QOtherRole_descriptor_ = file->message_type(12);
  static const int QOtherRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QOtherRole, otherrid_),
  };
  QOtherRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QOtherRole_descriptor_,
      QOtherRole::default_instance_,
      QOtherRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QOtherRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QOtherRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QOtherRole));
  ROtherRole_descriptor_ = file->message_type(13);
  static const int ROtherRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROtherRole, other_),
  };
  ROtherRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ROtherRole_descriptor_,
      ROtherRole::default_instance_,
      ROtherRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROtherRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROtherRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ROtherRole));
  VIEW_descriptor_ = file->enum_type(0);
  MAPTYPE_descriptor_ = file->enum_type(1);
  OBJECTTYPE_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Map_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPoint_descriptor_, &SPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SIdinfo_descriptor_, &SIdinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RIdList_descriptor_, &RIdList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SMapUpd_descriptor_, &SMapUpd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QMoveUpd_descriptor_, &QMoveUpd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RMoveUpd_descriptor_, &RMoveUpd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SViewRole_descriptor_, &SViewRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RViewRole_descriptor_, &RViewRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QCreateMap_descriptor_, &QCreateMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RMapUpdateInfo_descriptor_, &RMapUpdateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QChangeMap_descriptor_, &QChangeMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SOtherRole_descriptor_, &SOtherRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QOtherRole_descriptor_, &QOtherRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ROtherRole_descriptor_, &ROtherRole::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Map_2eproto() {
  delete SPoint::default_instance_;
  delete SPoint_reflection_;
  delete SIdinfo::default_instance_;
  delete SIdinfo_reflection_;
  delete RIdList::default_instance_;
  delete RIdList_reflection_;
  delete SMapUpd::default_instance_;
  delete SMapUpd_reflection_;
  delete QMoveUpd::default_instance_;
  delete QMoveUpd_reflection_;
  delete RMoveUpd::default_instance_;
  delete RMoveUpd_reflection_;
  delete SViewRole::default_instance_;
  delete SViewRole_reflection_;
  delete RViewRole::default_instance_;
  delete RViewRole_reflection_;
  delete QCreateMap::default_instance_;
  delete QCreateMap_reflection_;
  delete RMapUpdateInfo::default_instance_;
  delete RMapUpdateInfo_reflection_;
  delete QChangeMap::default_instance_;
  delete QChangeMap_reflection_;
  delete SOtherRole::default_instance_;
  delete SOtherRole_reflection_;
  delete QOtherRole::default_instance_;
  delete QOtherRole_reflection_;
  delete ROtherRole::default_instance_;
  delete ROtherRole_reflection_;
}

void protobuf_AddDesc_Map_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::qmyx::protobuf_AddDesc_Common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tMap.proto\022\004qmyx\032\014Common.proto\"\036\n\006SPoin"
    "t\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\")\n\007SIdinfo\022\013\n\003nI"
    "d\030\001 \002(\r\022\021\n\tnConfigId\030\002 \002(\r\")\n\007RIdList\022\036\n"
    "\007Id_list\030\001 \003(\0132\r.qmyx.SIdinfo\"Q\n\007SMapUpd"
    "\022\013\n\003nid\030\001 \002(\r\022\014\n\004npid\030\002 \002(\r\022\021\n\tnconfigid"
    "\030\003 \002(\r\022\030\n\002pt\030\004 \002(\0132\014.qmyx.SPoint\"B\n\010QMov"
    "eUpd\022\013\n\003nid\030\001 \002(\r\022\030\n\002pt\030\002 \002(\0132\014.qmyx.SPo"
    "int\022\017\n\007trigger\030\003 \001(\r\"\032\n\010RMoveUpd\022\016\n\006resu"
    "lt\030\001 \002(\r\"V\n\tSViewRole\022\013\n\003nid\030\001 \002(\r\022\036\n\010pt"
    "_start\030\002 \002(\0132\014.qmyx.SPoint\022\034\n\006pt_end\030\003 \002"
    "(\0132\014.qmyx.SPoint\"D\n\tRViewRole\022\030\n\004type\030\001 "
    "\002(\0162\n.qmyx.VIEW\022\035\n\004info\030\002 \003(\0132\017.qmyx.SVi"
    "ewRole\"\036\n\nQCreateMap\022\020\n\010nsenceid\030\001 \002(\r\"J"
    "\n\016RMapUpdateInfo\022\033\n\004type\030\001 \002(\0162\r.qmyx.MA"
    "PTYPE\022\033\n\004info\030\002 \002(\0132\r.qmyx.SMapUpd\"Z\n\nQC"
    "hangeMap\022\017\n\007old_nid\030\001 \002(\r\022\017\n\007new_nid\030\002 \002"
    "(\r\022\013\n\003nid\030\003 \002(\r\022\035\n\007pt_born\030\004 \002(\0132\014.qmyx."
    "SPoint\"\226\001\n\nSOtherRole\022\013\n\003nid\030\001 \002(\r\022\037\n\005nt"
    "ype\030\002 \002(\0162\020.qmyx.OBJECTTYPE\022\r\n\005level\030\003 \002"
    "(\r\022\021\n\tnconfigid\030\004 \002(\r\022\r\n\005model\030\005 \002(\r\022\016\n\006"
    "gender\030\006 \002(\r\022\013\n\003job\030\007 \002(\r\022\014\n\004name\030\010 \002(\t\""
    "\036\n\nQOtherRole\022\020\n\010otherrid\030\001 \003(\r\"-\n\nROthe"
    "rRole\022\037\n\005other\030\001 \003(\0132\020.qmyx.SOtherRole*6"
    "\n\004VIEW\022\016\n\nVIEW_ENTER\020\001\022\r\n\tVIEW_MOVE\020\002\022\017\n"
    "\013VIEW_LOGOUT\020\003*X\n\007MAPTYPE\022\014\n\010MAP_CITY\020\000\022"
    "\r\n\tMAP_FUBEN\020\001\022\022\n\016MAP_MUTILFUBEN\020\002\022\r\n\tMA"
    "P_ARENA\020\003\022\r\n\tMAP_WILED\020\004*=\n\nOBJECTTYPE\022\017"
    "\n\013TYPE_PLAYER\020\001\022\020\n\014TYPE_MONSTER\020\002\022\014\n\010TYP"
    "E_NPC\020\003", 1127);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Map.proto", &protobuf_RegisterTypes);
  SPoint::default_instance_ = new SPoint();
  SIdinfo::default_instance_ = new SIdinfo();
  RIdList::default_instance_ = new RIdList();
  SMapUpd::default_instance_ = new SMapUpd();
  QMoveUpd::default_instance_ = new QMoveUpd();
  RMoveUpd::default_instance_ = new RMoveUpd();
  SViewRole::default_instance_ = new SViewRole();
  RViewRole::default_instance_ = new RViewRole();
  QCreateMap::default_instance_ = new QCreateMap();
  RMapUpdateInfo::default_instance_ = new RMapUpdateInfo();
  QChangeMap::default_instance_ = new QChangeMap();
  SOtherRole::default_instance_ = new SOtherRole();
  QOtherRole::default_instance_ = new QOtherRole();
  ROtherRole::default_instance_ = new ROtherRole();
  SPoint::default_instance_->InitAsDefaultInstance();
  SIdinfo::default_instance_->InitAsDefaultInstance();
  RIdList::default_instance_->InitAsDefaultInstance();
  SMapUpd::default_instance_->InitAsDefaultInstance();
  QMoveUpd::default_instance_->InitAsDefaultInstance();
  RMoveUpd::default_instance_->InitAsDefaultInstance();
  SViewRole::default_instance_->InitAsDefaultInstance();
  RViewRole::default_instance_->InitAsDefaultInstance();
  QCreateMap::default_instance_->InitAsDefaultInstance();
  RMapUpdateInfo::default_instance_->InitAsDefaultInstance();
  QChangeMap::default_instance_->InitAsDefaultInstance();
  SOtherRole::default_instance_->InitAsDefaultInstance();
  QOtherRole::default_instance_->InitAsDefaultInstance();
  ROtherRole::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Map_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Map_2eproto {
  StaticDescriptorInitializer_Map_2eproto() {
    protobuf_AddDesc_Map_2eproto();
  }
} static_descriptor_initializer_Map_2eproto_;
const ::google::protobuf::EnumDescriptor* VIEW_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIEW_descriptor_;
}
bool VIEW_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MAPTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MAPTYPE_descriptor_;
}
bool MAPTYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OBJECTTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OBJECTTYPE_descriptor_;
}
bool OBJECTTYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SPoint::kXFieldNumber;
const int SPoint::kYFieldNumber;
#endif  // !_MSC_VER

SPoint::SPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPoint::InitAsDefaultInstance() {
}

SPoint::SPoint(const SPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPoint::~SPoint() {
  SharedDtor();
}

void SPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPoint_descriptor_;
}

const SPoint& SPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

SPoint* SPoint::default_instance_ = NULL;

SPoint* SPoint::New() const {
  return new SPoint;
}

void SPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPoint::MergeFrom(const SPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPoint::CopyFrom(const SPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SPoint::Swap(SPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPoint_descriptor_;
  metadata.reflection = SPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SIdinfo::kNIdFieldNumber;
const int SIdinfo::kNConfigIdFieldNumber;
#endif  // !_MSC_VER

SIdinfo::SIdinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SIdinfo::InitAsDefaultInstance() {
}

SIdinfo::SIdinfo(const SIdinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SIdinfo::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  nconfigid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SIdinfo::~SIdinfo() {
  SharedDtor();
}

void SIdinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SIdinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SIdinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SIdinfo_descriptor_;
}

const SIdinfo& SIdinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

SIdinfo* SIdinfo::default_instance_ = NULL;

SIdinfo* SIdinfo::New() const {
  return new SIdinfo;
}

void SIdinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    nconfigid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SIdinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nConfigId;
        break;
      }

      // required uint32 nConfigId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nconfigid_)));
          set_has_nconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SIdinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required uint32 nConfigId = 2;
  if (has_nconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nconfigid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SIdinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nId = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required uint32 nConfigId = 2;
  if (has_nconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nconfigid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SIdinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nId = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required uint32 nConfigId = 2;
    if (has_nconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nconfigid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SIdinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SIdinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SIdinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SIdinfo::MergeFrom(const SIdinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_nconfigid()) {
      set_nconfigid(from.nconfigid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SIdinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SIdinfo::CopyFrom(const SIdinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIdinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SIdinfo::Swap(SIdinfo* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(nconfigid_, other->nconfigid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SIdinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SIdinfo_descriptor_;
  metadata.reflection = SIdinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RIdList::kIdListFieldNumber;
#endif  // !_MSC_VER

RIdList::RIdList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RIdList::InitAsDefaultInstance() {
}

RIdList::RIdList(const RIdList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RIdList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RIdList::~RIdList() {
  SharedDtor();
}

void RIdList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RIdList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RIdList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RIdList_descriptor_;
}

const RIdList& RIdList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

RIdList* RIdList::default_instance_ = NULL;

RIdList* RIdList::New() const {
  return new RIdList;
}

void RIdList::Clear() {
  id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RIdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qmyx.SIdinfo Id_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_id_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RIdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .qmyx.SIdinfo Id_list = 1;
  for (int i = 0; i < this->id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RIdList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .qmyx.SIdinfo Id_list = 1;
  for (int i = 0; i < this->id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RIdList::ByteSize() const {
  int total_size = 0;

  // repeated .qmyx.SIdinfo Id_list = 1;
  total_size += 1 * this->id_list_size();
  for (int i = 0; i < this->id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->id_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RIdList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RIdList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RIdList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RIdList::MergeFrom(const RIdList& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_list_.MergeFrom(from.id_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RIdList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RIdList::CopyFrom(const RIdList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RIdList::IsInitialized() const {

  for (int i = 0; i < id_list_size(); i++) {
    if (!this->id_list(i).IsInitialized()) return false;
  }
  return true;
}

void RIdList::Swap(RIdList* other) {
  if (other != this) {
    id_list_.Swap(&other->id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RIdList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RIdList_descriptor_;
  metadata.reflection = RIdList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SMapUpd::kNidFieldNumber;
const int SMapUpd::kNpidFieldNumber;
const int SMapUpd::kNconfigidFieldNumber;
const int SMapUpd::kPtFieldNumber;
#endif  // !_MSC_VER

SMapUpd::SMapUpd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SMapUpd::InitAsDefaultInstance() {
  pt_ = const_cast< ::qmyx::SPoint*>(&::qmyx::SPoint::default_instance());
}

SMapUpd::SMapUpd(const SMapUpd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SMapUpd::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  npid_ = 0u;
  nconfigid_ = 0u;
  pt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SMapUpd::~SMapUpd() {
  SharedDtor();
}

void SMapUpd::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void SMapUpd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SMapUpd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SMapUpd_descriptor_;
}

const SMapUpd& SMapUpd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

SMapUpd* SMapUpd::default_instance_ = NULL;

SMapUpd* SMapUpd::New() const {
  return new SMapUpd;
}

void SMapUpd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    npid_ = 0u;
    nconfigid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::qmyx::SPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SMapUpd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npid;
        break;
      }

      // required uint32 npid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npid_)));
          set_has_npid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nconfigid;
        break;
      }

      // required uint32 nconfigid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nconfigid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nconfigid_)));
          set_has_nconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pt;
        break;
      }

      // required .qmyx.SPoint pt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SMapUpd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nid = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required uint32 npid = 2;
  if (has_npid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npid(), output);
  }

  // required uint32 nconfigid = 3;
  if (has_nconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nconfigid(), output);
  }

  // required .qmyx.SPoint pt = 4;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SMapUpd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nid = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required uint32 npid = 2;
  if (has_npid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npid(), target);
  }

  // required uint32 nconfigid = 3;
  if (has_nconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nconfigid(), target);
  }

  // required .qmyx.SPoint pt = 4;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SMapUpd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nid = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required uint32 npid = 2;
    if (has_npid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npid());
    }

    // required uint32 nconfigid = 3;
    if (has_nconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nconfigid());
    }

    // required .qmyx.SPoint pt = 4;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMapUpd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SMapUpd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SMapUpd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SMapUpd::MergeFrom(const SMapUpd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_npid()) {
      set_npid(from.npid());
    }
    if (from.has_nconfigid()) {
      set_nconfigid(from.nconfigid());
    }
    if (from.has_pt()) {
      mutable_pt()->::qmyx::SPoint::MergeFrom(from.pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SMapUpd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMapUpd::CopyFrom(const SMapUpd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMapUpd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_pt()) {
    if (!this->pt().IsInitialized()) return false;
  }
  return true;
}

void SMapUpd::Swap(SMapUpd* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(npid_, other->npid_);
    std::swap(nconfigid_, other->nconfigid_);
    std::swap(pt_, other->pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SMapUpd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SMapUpd_descriptor_;
  metadata.reflection = SMapUpd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QMoveUpd::kNidFieldNumber;
const int QMoveUpd::kPtFieldNumber;
const int QMoveUpd::kTriggerFieldNumber;
#endif  // !_MSC_VER

QMoveUpd::QMoveUpd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QMoveUpd::InitAsDefaultInstance() {
  pt_ = const_cast< ::qmyx::SPoint*>(&::qmyx::SPoint::default_instance());
}

QMoveUpd::QMoveUpd(const QMoveUpd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QMoveUpd::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  pt_ = NULL;
  trigger_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QMoveUpd::~QMoveUpd() {
  SharedDtor();
}

void QMoveUpd::SharedDtor() {
  if (this != default_instance_) {
    delete pt_;
  }
}

void QMoveUpd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QMoveUpd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QMoveUpd_descriptor_;
}

const QMoveUpd& QMoveUpd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

QMoveUpd* QMoveUpd::default_instance_ = NULL;

QMoveUpd* QMoveUpd::New() const {
  return new QMoveUpd;
}

void QMoveUpd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    if (has_pt()) {
      if (pt_ != NULL) pt_->::qmyx::SPoint::Clear();
    }
    trigger_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QMoveUpd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt;
        break;
      }

      // required .qmyx.SPoint pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_trigger;
        break;
      }

      // optional uint32 trigger = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trigger_)));
          set_has_trigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QMoveUpd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nid = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required .qmyx.SPoint pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt(), output);
  }

  // optional uint32 trigger = 3;
  if (has_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->trigger(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QMoveUpd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nid = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required .qmyx.SPoint pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt(), target);
  }

  // optional uint32 trigger = 3;
  if (has_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->trigger(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QMoveUpd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nid = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required .qmyx.SPoint pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt());
    }

    // optional uint32 trigger = 3;
    if (has_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trigger());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QMoveUpd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QMoveUpd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QMoveUpd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QMoveUpd::MergeFrom(const QMoveUpd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_pt()) {
      mutable_pt()->::qmyx::SPoint::MergeFrom(from.pt());
    }
    if (from.has_trigger()) {
      set_trigger(from.trigger());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QMoveUpd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QMoveUpd::CopyFrom(const QMoveUpd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QMoveUpd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pt()) {
    if (!this->pt().IsInitialized()) return false;
  }
  return true;
}

void QMoveUpd::Swap(QMoveUpd* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(pt_, other->pt_);
    std::swap(trigger_, other->trigger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QMoveUpd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QMoveUpd_descriptor_;
  metadata.reflection = QMoveUpd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RMoveUpd::kResultFieldNumber;
#endif  // !_MSC_VER

RMoveUpd::RMoveUpd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RMoveUpd::InitAsDefaultInstance() {
}

RMoveUpd::RMoveUpd(const RMoveUpd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RMoveUpd::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RMoveUpd::~RMoveUpd() {
  SharedDtor();
}

void RMoveUpd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RMoveUpd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RMoveUpd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RMoveUpd_descriptor_;
}

const RMoveUpd& RMoveUpd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

RMoveUpd* RMoveUpd::default_instance_ = NULL;

RMoveUpd* RMoveUpd::New() const {
  return new RMoveUpd;
}

void RMoveUpd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RMoveUpd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RMoveUpd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RMoveUpd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RMoveUpd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RMoveUpd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RMoveUpd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RMoveUpd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RMoveUpd::MergeFrom(const RMoveUpd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RMoveUpd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMoveUpd::CopyFrom(const RMoveUpd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMoveUpd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RMoveUpd::Swap(RMoveUpd* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RMoveUpd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RMoveUpd_descriptor_;
  metadata.reflection = RMoveUpd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SViewRole::kNidFieldNumber;
const int SViewRole::kPtStartFieldNumber;
const int SViewRole::kPtEndFieldNumber;
#endif  // !_MSC_VER

SViewRole::SViewRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SViewRole::InitAsDefaultInstance() {
  pt_start_ = const_cast< ::qmyx::SPoint*>(&::qmyx::SPoint::default_instance());
  pt_end_ = const_cast< ::qmyx::SPoint*>(&::qmyx::SPoint::default_instance());
}

SViewRole::SViewRole(const SViewRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SViewRole::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  pt_start_ = NULL;
  pt_end_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SViewRole::~SViewRole() {
  SharedDtor();
}

void SViewRole::SharedDtor() {
  if (this != default_instance_) {
    delete pt_start_;
    delete pt_end_;
  }
}

void SViewRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SViewRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SViewRole_descriptor_;
}

const SViewRole& SViewRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

SViewRole* SViewRole::default_instance_ = NULL;

SViewRole* SViewRole::New() const {
  return new SViewRole;
}

void SViewRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    if (has_pt_start()) {
      if (pt_start_ != NULL) pt_start_->::qmyx::SPoint::Clear();
    }
    if (has_pt_end()) {
      if (pt_end_ != NULL) pt_end_->::qmyx::SPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SViewRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pt_start;
        break;
      }

      // required .qmyx.SPoint pt_start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pt_end;
        break;
      }

      // required .qmyx.SPoint pt_end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SViewRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nid = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required .qmyx.SPoint pt_start = 2;
  if (has_pt_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pt_start(), output);
  }

  // required .qmyx.SPoint pt_end = 3;
  if (has_pt_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pt_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SViewRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nid = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required .qmyx.SPoint pt_start = 2;
  if (has_pt_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pt_start(), target);
  }

  // required .qmyx.SPoint pt_end = 3;
  if (has_pt_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pt_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SViewRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nid = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required .qmyx.SPoint pt_start = 2;
    if (has_pt_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt_start());
    }

    // required .qmyx.SPoint pt_end = 3;
    if (has_pt_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt_end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SViewRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SViewRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SViewRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SViewRole::MergeFrom(const SViewRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_pt_start()) {
      mutable_pt_start()->::qmyx::SPoint::MergeFrom(from.pt_start());
    }
    if (from.has_pt_end()) {
      mutable_pt_end()->::qmyx::SPoint::MergeFrom(from.pt_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SViewRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SViewRole::CopyFrom(const SViewRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SViewRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pt_start()) {
    if (!this->pt_start().IsInitialized()) return false;
  }
  if (has_pt_end()) {
    if (!this->pt_end().IsInitialized()) return false;
  }
  return true;
}

void SViewRole::Swap(SViewRole* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(pt_start_, other->pt_start_);
    std::swap(pt_end_, other->pt_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SViewRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SViewRole_descriptor_;
  metadata.reflection = SViewRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RViewRole::kTypeFieldNumber;
const int RViewRole::kInfoFieldNumber;
#endif  // !_MSC_VER

RViewRole::RViewRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RViewRole::InitAsDefaultInstance() {
}

RViewRole::RViewRole(const RViewRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RViewRole::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RViewRole::~RViewRole() {
  SharedDtor();
}

void RViewRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RViewRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RViewRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RViewRole_descriptor_;
}

const RViewRole& RViewRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

RViewRole* RViewRole::default_instance_ = NULL;

RViewRole* RViewRole::New() const {
  return new RViewRole;
}

void RViewRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RViewRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .qmyx.VIEW type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::qmyx::VIEW_IsValid(value)) {
            set_type(static_cast< ::qmyx::VIEW >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .qmyx.SViewRole info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RViewRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .qmyx.VIEW type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .qmyx.SViewRole info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RViewRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .qmyx.VIEW type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .qmyx.SViewRole info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RViewRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .qmyx.VIEW type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .qmyx.SViewRole info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RViewRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RViewRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RViewRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RViewRole::MergeFrom(const RViewRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RViewRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RViewRole::CopyFrom(const RViewRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RViewRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void RViewRole::Swap(RViewRole* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RViewRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RViewRole_descriptor_;
  metadata.reflection = RViewRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QCreateMap::kNsenceidFieldNumber;
#endif  // !_MSC_VER

QCreateMap::QCreateMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QCreateMap::InitAsDefaultInstance() {
}

QCreateMap::QCreateMap(const QCreateMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QCreateMap::SharedCtor() {
  _cached_size_ = 0;
  nsenceid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QCreateMap::~QCreateMap() {
  SharedDtor();
}

void QCreateMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QCreateMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QCreateMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QCreateMap_descriptor_;
}

const QCreateMap& QCreateMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

QCreateMap* QCreateMap::default_instance_ = NULL;

QCreateMap* QCreateMap::New() const {
  return new QCreateMap;
}

void QCreateMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nsenceid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QCreateMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nsenceid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nsenceid_)));
          set_has_nsenceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QCreateMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nsenceid = 1;
  if (has_nsenceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nsenceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QCreateMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nsenceid = 1;
  if (has_nsenceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nsenceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QCreateMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nsenceid = 1;
    if (has_nsenceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nsenceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QCreateMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QCreateMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QCreateMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QCreateMap::MergeFrom(const QCreateMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nsenceid()) {
      set_nsenceid(from.nsenceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QCreateMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QCreateMap::CopyFrom(const QCreateMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QCreateMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QCreateMap::Swap(QCreateMap* other) {
  if (other != this) {
    std::swap(nsenceid_, other->nsenceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QCreateMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QCreateMap_descriptor_;
  metadata.reflection = QCreateMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RMapUpdateInfo::kTypeFieldNumber;
const int RMapUpdateInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

RMapUpdateInfo::RMapUpdateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RMapUpdateInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::qmyx::SMapUpd*>(&::qmyx::SMapUpd::default_instance());
}

RMapUpdateInfo::RMapUpdateInfo(const RMapUpdateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RMapUpdateInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RMapUpdateInfo::~RMapUpdateInfo() {
  SharedDtor();
}

void RMapUpdateInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void RMapUpdateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RMapUpdateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RMapUpdateInfo_descriptor_;
}

const RMapUpdateInfo& RMapUpdateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

RMapUpdateInfo* RMapUpdateInfo::default_instance_ = NULL;

RMapUpdateInfo* RMapUpdateInfo::New() const {
  return new RMapUpdateInfo;
}

void RMapUpdateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::qmyx::SMapUpd::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RMapUpdateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .qmyx.MAPTYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::qmyx::MAPTYPE_IsValid(value)) {
            set_type(static_cast< ::qmyx::MAPTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // required .qmyx.SMapUpd info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RMapUpdateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .qmyx.MAPTYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .qmyx.SMapUpd info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RMapUpdateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .qmyx.MAPTYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .qmyx.SMapUpd info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RMapUpdateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .qmyx.MAPTYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .qmyx.SMapUpd info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RMapUpdateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RMapUpdateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RMapUpdateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RMapUpdateInfo::MergeFrom(const RMapUpdateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      mutable_info()->::qmyx::SMapUpd::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RMapUpdateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMapUpdateInfo::CopyFrom(const RMapUpdateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMapUpdateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void RMapUpdateInfo::Swap(RMapUpdateInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RMapUpdateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RMapUpdateInfo_descriptor_;
  metadata.reflection = RMapUpdateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QChangeMap::kOldNidFieldNumber;
const int QChangeMap::kNewNidFieldNumber;
const int QChangeMap::kNidFieldNumber;
const int QChangeMap::kPtBornFieldNumber;
#endif  // !_MSC_VER

QChangeMap::QChangeMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QChangeMap::InitAsDefaultInstance() {
  pt_born_ = const_cast< ::qmyx::SPoint*>(&::qmyx::SPoint::default_instance());
}

QChangeMap::QChangeMap(const QChangeMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QChangeMap::SharedCtor() {
  _cached_size_ = 0;
  old_nid_ = 0u;
  new_nid_ = 0u;
  nid_ = 0u;
  pt_born_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QChangeMap::~QChangeMap() {
  SharedDtor();
}

void QChangeMap::SharedDtor() {
  if (this != default_instance_) {
    delete pt_born_;
  }
}

void QChangeMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QChangeMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QChangeMap_descriptor_;
}

const QChangeMap& QChangeMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

QChangeMap* QChangeMap::default_instance_ = NULL;

QChangeMap* QChangeMap::New() const {
  return new QChangeMap;
}

void QChangeMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    old_nid_ = 0u;
    new_nid_ = 0u;
    nid_ = 0u;
    if (has_pt_born()) {
      if (pt_born_ != NULL) pt_born_->::qmyx::SPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QChangeMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 old_nid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_nid_)));
          set_has_old_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_nid;
        break;
      }

      // required uint32 new_nid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_nid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_nid_)));
          set_has_new_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nid;
        break;
      }

      // required uint32 nid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pt_born;
        break;
      }

      // required .qmyx.SPoint pt_born = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pt_born:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pt_born()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QChangeMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 old_nid = 1;
  if (has_old_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->old_nid(), output);
  }

  // required uint32 new_nid = 2;
  if (has_new_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_nid(), output);
  }

  // required uint32 nid = 3;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nid(), output);
  }

  // required .qmyx.SPoint pt_born = 4;
  if (has_pt_born()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pt_born(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QChangeMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 old_nid = 1;
  if (has_old_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->old_nid(), target);
  }

  // required uint32 new_nid = 2;
  if (has_new_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_nid(), target);
  }

  // required uint32 nid = 3;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nid(), target);
  }

  // required .qmyx.SPoint pt_born = 4;
  if (has_pt_born()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pt_born(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QChangeMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 old_nid = 1;
    if (has_old_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_nid());
    }

    // required uint32 new_nid = 2;
    if (has_new_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_nid());
    }

    // required uint32 nid = 3;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required .qmyx.SPoint pt_born = 4;
    if (has_pt_born()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pt_born());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QChangeMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QChangeMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QChangeMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QChangeMap::MergeFrom(const QChangeMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_nid()) {
      set_old_nid(from.old_nid());
    }
    if (from.has_new_nid()) {
      set_new_nid(from.new_nid());
    }
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_pt_born()) {
      mutable_pt_born()->::qmyx::SPoint::MergeFrom(from.pt_born());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QChangeMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QChangeMap::CopyFrom(const QChangeMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QChangeMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_pt_born()) {
    if (!this->pt_born().IsInitialized()) return false;
  }
  return true;
}

void QChangeMap::Swap(QChangeMap* other) {
  if (other != this) {
    std::swap(old_nid_, other->old_nid_);
    std::swap(new_nid_, other->new_nid_);
    std::swap(nid_, other->nid_);
    std::swap(pt_born_, other->pt_born_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QChangeMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QChangeMap_descriptor_;
  metadata.reflection = QChangeMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SOtherRole::kNidFieldNumber;
const int SOtherRole::kNtypeFieldNumber;
const int SOtherRole::kLevelFieldNumber;
const int SOtherRole::kNconfigidFieldNumber;
const int SOtherRole::kModelFieldNumber;
const int SOtherRole::kGenderFieldNumber;
const int SOtherRole::kJobFieldNumber;
const int SOtherRole::kNameFieldNumber;
#endif  // !_MSC_VER

SOtherRole::SOtherRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SOtherRole::InitAsDefaultInstance() {
}

SOtherRole::SOtherRole(const SOtherRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SOtherRole::SharedCtor() {
  _cached_size_ = 0;
  nid_ = 0u;
  ntype_ = 1;
  level_ = 0u;
  nconfigid_ = 0u;
  model_ = 0u;
  gender_ = 0u;
  job_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SOtherRole::~SOtherRole() {
  SharedDtor();
}

void SOtherRole::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SOtherRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SOtherRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SOtherRole_descriptor_;
}

const SOtherRole& SOtherRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

SOtherRole* SOtherRole::default_instance_ = NULL;

SOtherRole* SOtherRole::New() const {
  return new SOtherRole;
}

void SOtherRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nid_ = 0u;
    ntype_ = 1;
    level_ = 0u;
    nconfigid_ = 0u;
    model_ = 0u;
    gender_ = 0u;
    job_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SOtherRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nid_)));
          set_has_nid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ntype;
        break;
      }

      // required .qmyx.OBJECTTYPE ntype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ntype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::qmyx::OBJECTTYPE_IsValid(value)) {
            set_ntype(static_cast< ::qmyx::OBJECTTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nconfigid;
        break;
      }

      // required uint32 nconfigid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nconfigid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nconfigid_)));
          set_has_nconfigid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_model;
        break;
      }

      // required uint32 model = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &model_)));
          set_has_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gender;
        break;
      }

      // required uint32 gender = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_job;
        break;
      }

      // required uint32 job = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }

      // required string name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SOtherRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nid = 1;
  if (has_nid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nid(), output);
  }

  // required .qmyx.OBJECTTYPE ntype = 2;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ntype(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 nconfigid = 4;
  if (has_nconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nconfigid(), output);
  }

  // required uint32 model = 5;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->model(), output);
  }

  // required uint32 gender = 6;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gender(), output);
  }

  // required uint32 job = 7;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->job(), output);
  }

  // required string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SOtherRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nid = 1;
  if (has_nid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nid(), target);
  }

  // required .qmyx.OBJECTTYPE ntype = 2;
  if (has_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ntype(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 nconfigid = 4;
  if (has_nconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->nconfigid(), target);
  }

  // required uint32 model = 5;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->model(), target);
  }

  // required uint32 gender = 6;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gender(), target);
  }

  // required uint32 job = 7;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->job(), target);
  }

  // required string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SOtherRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nid = 1;
    if (has_nid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nid());
    }

    // required .qmyx.OBJECTTYPE ntype = 2;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ntype());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 nconfigid = 4;
    if (has_nconfigid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nconfigid());
    }

    // required uint32 model = 5;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->model());
    }

    // required uint32 gender = 6;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // required uint32 job = 7;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // required string name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SOtherRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SOtherRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SOtherRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SOtherRole::MergeFrom(const SOtherRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nid()) {
      set_nid(from.nid());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_nconfigid()) {
      set_nconfigid(from.nconfigid());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SOtherRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SOtherRole::CopyFrom(const SOtherRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SOtherRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void SOtherRole::Swap(SOtherRole* other) {
  if (other != this) {
    std::swap(nid_, other->nid_);
    std::swap(ntype_, other->ntype_);
    std::swap(level_, other->level_);
    std::swap(nconfigid_, other->nconfigid_);
    std::swap(model_, other->model_);
    std::swap(gender_, other->gender_);
    std::swap(job_, other->job_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SOtherRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SOtherRole_descriptor_;
  metadata.reflection = SOtherRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QOtherRole::kOtherridFieldNumber;
#endif  // !_MSC_VER

QOtherRole::QOtherRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QOtherRole::InitAsDefaultInstance() {
}

QOtherRole::QOtherRole(const QOtherRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QOtherRole::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QOtherRole::~QOtherRole() {
  SharedDtor();
}

void QOtherRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QOtherRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QOtherRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QOtherRole_descriptor_;
}

const QOtherRole& QOtherRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

QOtherRole* QOtherRole::default_instance_ = NULL;

QOtherRole* QOtherRole::New() const {
  return new QOtherRole;
}

void QOtherRole::Clear() {
  otherrid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QOtherRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 otherrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otherrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_otherrid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_otherrid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_otherrid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QOtherRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 otherrid = 1;
  for (int i = 0; i < this->otherrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->otherrid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QOtherRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 otherrid = 1;
  for (int i = 0; i < this->otherrid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->otherrid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QOtherRole::ByteSize() const {
  int total_size = 0;

  // repeated uint32 otherrid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->otherrid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->otherrid(i));
    }
    total_size += 1 * this->otherrid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QOtherRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QOtherRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QOtherRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QOtherRole::MergeFrom(const QOtherRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  otherrid_.MergeFrom(from.otherrid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QOtherRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QOtherRole::CopyFrom(const QOtherRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QOtherRole::IsInitialized() const {

  return true;
}

void QOtherRole::Swap(QOtherRole* other) {
  if (other != this) {
    otherrid_.Swap(&other->otherrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QOtherRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QOtherRole_descriptor_;
  metadata.reflection = QOtherRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ROtherRole::kOtherFieldNumber;
#endif  // !_MSC_VER

ROtherRole::ROtherRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ROtherRole::InitAsDefaultInstance() {
}

ROtherRole::ROtherRole(const ROtherRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ROtherRole::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ROtherRole::~ROtherRole() {
  SharedDtor();
}

void ROtherRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ROtherRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROtherRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROtherRole_descriptor_;
}

const ROtherRole& ROtherRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2eproto();
  return *default_instance_;
}

ROtherRole* ROtherRole::default_instance_ = NULL;

ROtherRole* ROtherRole::New() const {
  return new ROtherRole;
}

void ROtherRole::Clear() {
  other_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ROtherRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .qmyx.SOtherRole other = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_other()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_other;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ROtherRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .qmyx.SOtherRole other = 1;
  for (int i = 0; i < this->other_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->other(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ROtherRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .qmyx.SOtherRole other = 1;
  for (int i = 0; i < this->other_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->other(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ROtherRole::ByteSize() const {
  int total_size = 0;

  // repeated .qmyx.SOtherRole other = 1;
  total_size += 1 * this->other_size();
  for (int i = 0; i < this->other_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->other(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROtherRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ROtherRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ROtherRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ROtherRole::MergeFrom(const ROtherRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  other_.MergeFrom(from.other_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ROtherRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROtherRole::CopyFrom(const ROtherRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROtherRole::IsInitialized() const {

  for (int i = 0; i < other_size(); i++) {
    if (!this->other(i).IsInitialized()) return false;
  }
  return true;
}

void ROtherRole::Swap(ROtherRole* other) {
  if (other != this) {
    other_.Swap(&other->other_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ROtherRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROtherRole_descriptor_;
  metadata.reflection = ROtherRole_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace qmyx

// @@protoc_insertion_point(global_scope)
