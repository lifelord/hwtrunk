// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AskLogin.proto

#ifndef PROTOBUF_AskLogin_2eproto__INCLUDED
#define PROTOBUF_AskLogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)

namespace qmyx {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AskLogin_2eproto();
void protobuf_AssignDesc_AskLogin_2eproto();
void protobuf_ShutdownFile_AskLogin_2eproto();

class QAccount;
class RAccount;
class QRoleLogin;
class QRoleCreate;
class Attri;
class RRoleLogin;

enum ACCOUNT {
  ACCOUNT_CREATE = 1,
  ACCOUNT_LOGIN = 2
};
bool ACCOUNT_IsValid(int value);
const ACCOUNT ACCOUNT_MIN = ACCOUNT_CREATE;
const ACCOUNT ACCOUNT_MAX = ACCOUNT_LOGIN;
const int ACCOUNT_ARRAYSIZE = ACCOUNT_MAX + 1;

const ::google::protobuf::EnumDescriptor* ACCOUNT_descriptor();
inline const ::std::string& ACCOUNT_Name(ACCOUNT value) {
  return ::google::protobuf::internal::NameOfEnum(
    ACCOUNT_descriptor(), value);
}
inline bool ACCOUNT_Parse(
    const ::std::string& name, ACCOUNT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ACCOUNT>(
    ACCOUNT_descriptor(), name, value);
}
enum JOB {
  JOB_1 = 1,
  JOB_2 = 2
};
bool JOB_IsValid(int value);
const JOB JOB_MIN = JOB_1;
const JOB JOB_MAX = JOB_2;
const int JOB_ARRAYSIZE = JOB_MAX + 1;

const ::google::protobuf::EnumDescriptor* JOB_descriptor();
inline const ::std::string& JOB_Name(JOB value) {
  return ::google::protobuf::internal::NameOfEnum(
    JOB_descriptor(), value);
}
inline bool JOB_Parse(
    const ::std::string& name, JOB* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JOB>(
    JOB_descriptor(), name, value);
}
enum ATTRI {
  ATTRI_JOB = 1,
  ATTRI_LEVEL = 2,
  ATTRI_GENDER = 3,
  ATTRI_CONFIGID = 4,
  ATTRI_MONEY = 5,
  ATTRI_EXP = 6,
  ATTRI_VIP_LEVEL = 7,
  ATTRI_STAMIA = 8,
  ATTRI_RANKING = 9,
  ATTRI_MAPID = 10,
  ATTRI_POSX = 11,
  ATTRI_POSY = 12,
  ATTRI_NEW = 13
};
bool ATTRI_IsValid(int value);
const ATTRI ATTRI_MIN = ATTRI_JOB;
const ATTRI ATTRI_MAX = ATTRI_NEW;
const int ATTRI_ARRAYSIZE = ATTRI_MAX + 1;

const ::google::protobuf::EnumDescriptor* ATTRI_descriptor();
inline const ::std::string& ATTRI_Name(ATTRI value) {
  return ::google::protobuf::internal::NameOfEnum(
    ATTRI_descriptor(), value);
}
inline bool ATTRI_Parse(
    const ::std::string& name, ATTRI* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ATTRI>(
    ATTRI_descriptor(), name, value);
}
// ===================================================================

class QAccount : public ::google::protobuf::Message {
 public:
  QAccount();
  virtual ~QAccount();

  QAccount(const QAccount& from);

  inline QAccount& operator=(const QAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QAccount& default_instance();

  void Swap(QAccount* other);

  // implements Message ----------------------------------------------

  QAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QAccount& from);
  void MergeFrom(const QAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .qmyx.ACCOUNT type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::qmyx::ACCOUNT type() const;
  inline void set_type(::qmyx::ACCOUNT value);

  // required string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:qmyx.QAccount)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* password_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_AskLogin_2eproto();
  friend void protobuf_AssignDesc_AskLogin_2eproto();
  friend void protobuf_ShutdownFile_AskLogin_2eproto();

  void InitAsDefaultInstance();
  static QAccount* default_instance_;
};
// -------------------------------------------------------------------

class RAccount : public ::google::protobuf::Message {
 public:
  RAccount();
  virtual ~RAccount();

  RAccount(const RAccount& from);

  inline RAccount& operator=(const RAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RAccount& default_instance();

  void Swap(RAccount* other);

  // implements Message ----------------------------------------------

  RAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RAccount& from);
  void MergeFrom(const RAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 session_id = 3;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);

  // required uint32 login_port = 4;
  inline bool has_login_port() const;
  inline void clear_login_port();
  static const int kLoginPortFieldNumber = 4;
  inline ::google::protobuf::uint32 login_port() const;
  inline void set_login_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:qmyx.RAccount)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_login_port();
  inline void clear_has_login_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 session_id_;
  ::google::protobuf::uint32 login_port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_AskLogin_2eproto();
  friend void protobuf_AssignDesc_AskLogin_2eproto();
  friend void protobuf_ShutdownFile_AskLogin_2eproto();

  void InitAsDefaultInstance();
  static RAccount* default_instance_;
};
// -------------------------------------------------------------------

class QRoleLogin : public ::google::protobuf::Message {
 public:
  QRoleLogin();
  virtual ~QRoleLogin();

  QRoleLogin(const QRoleLogin& from);

  inline QRoleLogin& operator=(const QRoleLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QRoleLogin& default_instance();

  void Swap(QRoleLogin* other);

  // implements Message ----------------------------------------------

  QRoleLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QRoleLogin& from);
  void MergeFrom(const QRoleLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 session_id = 3;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);

  // required uint32 version = 4;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 4;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:qmyx.QRoleLogin)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 session_id_;
  ::google::protobuf::uint32 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_AskLogin_2eproto();
  friend void protobuf_AssignDesc_AskLogin_2eproto();
  friend void protobuf_ShutdownFile_AskLogin_2eproto();

  void InitAsDefaultInstance();
  static QRoleLogin* default_instance_;
};
// -------------------------------------------------------------------

class QRoleCreate : public ::google::protobuf::Message {
 public:
  QRoleCreate();
  virtual ~QRoleCreate();

  QRoleCreate(const QRoleCreate& from);

  inline QRoleCreate& operator=(const QRoleCreate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QRoleCreate& default_instance();

  void Swap(QRoleCreate* other);

  // implements Message ----------------------------------------------

  QRoleCreate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QRoleCreate& from);
  void MergeFrom(const QRoleCreate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .qmyx.JOB job = 1;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 1;
  inline ::qmyx::JOB job() const;
  inline void set_job(::qmyx::JOB value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 gender = 3;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 3;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);

  // required uint32 configid = 4;
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigidFieldNumber = 4;
  inline ::google::protobuf::uint32 configid() const;
  inline void set_configid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:qmyx.QRoleCreate)
 private:
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_configid();
  inline void clear_has_configid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int job_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint32 configid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_AskLogin_2eproto();
  friend void protobuf_AssignDesc_AskLogin_2eproto();
  friend void protobuf_ShutdownFile_AskLogin_2eproto();

  void InitAsDefaultInstance();
  static QRoleCreate* default_instance_;
};
// -------------------------------------------------------------------

class Attri : public ::google::protobuf::Message {
 public:
  Attri();
  virtual ~Attri();

  Attri(const Attri& from);

  inline Attri& operator=(const Attri& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attri& default_instance();

  void Swap(Attri* other);

  // implements Message ----------------------------------------------

  Attri* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attri& from);
  void MergeFrom(const Attri& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .qmyx.ATTRI type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::qmyx::ATTRI type() const;
  inline void set_type(::qmyx::ATTRI value);

  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:qmyx.Attri)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AskLogin_2eproto();
  friend void protobuf_AssignDesc_AskLogin_2eproto();
  friend void protobuf_ShutdownFile_AskLogin_2eproto();

  void InitAsDefaultInstance();
  static Attri* default_instance_;
};
// -------------------------------------------------------------------

class RRoleLogin : public ::google::protobuf::Message {
 public:
  RRoleLogin();
  virtual ~RRoleLogin();

  RRoleLogin(const RRoleLogin& from);

  inline RRoleLogin& operator=(const RRoleLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RRoleLogin& default_instance();

  void Swap(RRoleLogin* other);

  // implements Message ----------------------------------------------

  RRoleLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RRoleLogin& from);
  void MergeFrom(const RRoleLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .qmyx.Attri list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::qmyx::Attri& list(int index) const;
  inline ::qmyx::Attri* mutable_list(int index);
  inline ::qmyx::Attri* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::qmyx::Attri >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::qmyx::Attri >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:qmyx.RRoleLogin)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::qmyx::Attri > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AskLogin_2eproto();
  friend void protobuf_AssignDesc_AskLogin_2eproto();
  friend void protobuf_ShutdownFile_AskLogin_2eproto();

  void InitAsDefaultInstance();
  static RRoleLogin* default_instance_;
};
// ===================================================================


// ===================================================================

// QAccount

// required .qmyx.ACCOUNT type = 1;
inline bool QAccount::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QAccount::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QAccount::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QAccount::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::qmyx::ACCOUNT QAccount::type() const {
  return static_cast< ::qmyx::ACCOUNT >(type_);
}
inline void QAccount::set_type(::qmyx::ACCOUNT value) {
  assert(::qmyx::ACCOUNT_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string account = 2;
inline bool QAccount::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QAccount::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QAccount::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QAccount::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& QAccount::account() const {
  return *account_;
}
inline void QAccount::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void QAccount::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void QAccount::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QAccount::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* QAccount::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QAccount::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 3;
inline bool QAccount::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QAccount::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QAccount::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QAccount::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& QAccount::password() const {
  return *password_;
}
inline void QAccount::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void QAccount::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void QAccount::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QAccount::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* QAccount::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QAccount::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RAccount

// required uint32 user_id = 1;
inline bool RAccount::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RAccount::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RAccount::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RAccount::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 RAccount::user_id() const {
  return user_id_;
}
inline void RAccount::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 role_id = 2;
inline bool RAccount::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RAccount::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RAccount::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RAccount::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 RAccount::role_id() const {
  return role_id_;
}
inline void RAccount::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 session_id = 3;
inline bool RAccount::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RAccount::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RAccount::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RAccount::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 RAccount::session_id() const {
  return session_id_;
}
inline void RAccount::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
}

// required uint32 login_port = 4;
inline bool RAccount::has_login_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RAccount::set_has_login_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RAccount::clear_has_login_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RAccount::clear_login_port() {
  login_port_ = 0u;
  clear_has_login_port();
}
inline ::google::protobuf::uint32 RAccount::login_port() const {
  return login_port_;
}
inline void RAccount::set_login_port(::google::protobuf::uint32 value) {
  set_has_login_port();
  login_port_ = value;
}

// -------------------------------------------------------------------

// QRoleLogin

// required uint32 user_id = 1;
inline bool QRoleLogin::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QRoleLogin::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QRoleLogin::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QRoleLogin::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 QRoleLogin::user_id() const {
  return user_id_;
}
inline void QRoleLogin::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 role_id = 2;
inline bool QRoleLogin::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QRoleLogin::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QRoleLogin::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QRoleLogin::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 QRoleLogin::role_id() const {
  return role_id_;
}
inline void QRoleLogin::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 session_id = 3;
inline bool QRoleLogin::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QRoleLogin::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QRoleLogin::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QRoleLogin::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 QRoleLogin::session_id() const {
  return session_id_;
}
inline void QRoleLogin::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
}

// required uint32 version = 4;
inline bool QRoleLogin::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QRoleLogin::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QRoleLogin::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QRoleLogin::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 QRoleLogin::version() const {
  return version_;
}
inline void QRoleLogin::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// -------------------------------------------------------------------

// QRoleCreate

// required .qmyx.JOB job = 1;
inline bool QRoleCreate::has_job() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QRoleCreate::set_has_job() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QRoleCreate::clear_has_job() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QRoleCreate::clear_job() {
  job_ = 1;
  clear_has_job();
}
inline ::qmyx::JOB QRoleCreate::job() const {
  return static_cast< ::qmyx::JOB >(job_);
}
inline void QRoleCreate::set_job(::qmyx::JOB value) {
  assert(::qmyx::JOB_IsValid(value));
  set_has_job();
  job_ = value;
}

// required string name = 2;
inline bool QRoleCreate::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QRoleCreate::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QRoleCreate::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QRoleCreate::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& QRoleCreate::name() const {
  return *name_;
}
inline void QRoleCreate::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void QRoleCreate::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void QRoleCreate::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QRoleCreate::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* QRoleCreate::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QRoleCreate::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 gender = 3;
inline bool QRoleCreate::has_gender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QRoleCreate::set_has_gender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QRoleCreate::clear_has_gender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QRoleCreate::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 QRoleCreate::gender() const {
  return gender_;
}
inline void QRoleCreate::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// required uint32 configid = 4;
inline bool QRoleCreate::has_configid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QRoleCreate::set_has_configid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QRoleCreate::clear_has_configid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QRoleCreate::clear_configid() {
  configid_ = 0u;
  clear_has_configid();
}
inline ::google::protobuf::uint32 QRoleCreate::configid() const {
  return configid_;
}
inline void QRoleCreate::set_configid(::google::protobuf::uint32 value) {
  set_has_configid();
  configid_ = value;
}

// -------------------------------------------------------------------

// Attri

// required .qmyx.ATTRI type = 1;
inline bool Attri::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attri::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attri::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attri::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::qmyx::ATTRI Attri::type() const {
  return static_cast< ::qmyx::ATTRI >(type_);
}
inline void Attri::set_type(::qmyx::ATTRI value) {
  assert(::qmyx::ATTRI_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 value = 2;
inline bool Attri::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attri::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attri::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attri::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 Attri::value() const {
  return value_;
}
inline void Attri::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// RRoleLogin

// required string name = 1;
inline bool RRoleLogin::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RRoleLogin::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RRoleLogin::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RRoleLogin::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RRoleLogin::name() const {
  return *name_;
}
inline void RRoleLogin::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RRoleLogin::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RRoleLogin::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RRoleLogin::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RRoleLogin::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RRoleLogin::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .qmyx.Attri list = 2;
inline int RRoleLogin::list_size() const {
  return list_.size();
}
inline void RRoleLogin::clear_list() {
  list_.Clear();
}
inline const ::qmyx::Attri& RRoleLogin::list(int index) const {
  return list_.Get(index);
}
inline ::qmyx::Attri* RRoleLogin::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::qmyx::Attri* RRoleLogin::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qmyx::Attri >&
RRoleLogin::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::qmyx::Attri >*
RRoleLogin::mutable_list() {
  return &list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace qmyx

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qmyx::ACCOUNT>() {
  return ::qmyx::ACCOUNT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qmyx::JOB>() {
  return ::qmyx::JOB_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qmyx::ATTRI>() {
  return ::qmyx::ATTRI_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AskLogin_2eproto__INCLUDED
